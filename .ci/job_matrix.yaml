---
job: 'torch-ucc'

registry_host: 'harbor.mellanox.com'
# TODO change
registry_path: '/swx-infra/torch-ucc'
registry_auth: '1daaea28-800e-425f-a91f-3bd3e9136eea'

kubernetes:
  cloud: 'swx-k8s'

volumes:
  - { mountPath: '/hpc/local', hostPath: '/hpc/local' }
  - { mountPath: '/auto/sw_tools', hostPath: '/auto/sw_tools' }
  - { mountPath: '/.autodirect/mtrswgwork', hostPath: '/.autodirect/mtrswgwork' }
  - { mountPath: '/.autodirect/sw/release', hostPath: '/.autodirect/sw/release' }

env:
  CUDA_HOME: '/usr/local/cuda'
  INSTALL_ROOT_DIR: '/opt'
  UCX_BRANCH: 'v1.10.x'
  UCX_SRC_DIR: '${WORKSPACE}/ucx'
  UCX_BUILD_TYPE: 'debug'
  UCX_BUILD_DIR: '${UCX_SRC_DIR}/build-${UCX_BUILD_TYPE}'
  UCX_INSTALL_DIR: '${INSTALL_ROOT_DIR}/ucx/${UCX_BUILD_TYPE}'
  UCC_SRC_DIR: '${WORKSPACE}/ucc'
  XCCL_SRC_DIR: '${WORKSPACE}/xccl'
  XCCL_BUILD_TYPE: 'debug'
  XCCL_BUILD_DIR: '${XCCL_SRC_DIR}/build-${XCCL_BUILD_TYPE}'
  XCCL_INSTALL_DIR: '${INSTALL_ROOT_DIR}/xccl/${XCCL_BUILD_TYPE}'

runs_on_dockers:
  - { file: '.ci/Dockerfile.ubuntu20.04', name: 'ubuntu20.04', tag: 'latest', arch: 'x86_64' }

# TODO debug
timeout_minutes: 180

steps:
  #============================================================================
  - name: Check Env
    run: |
      echo "INFO: check environment"
      find .
      printenv
      cat /proc/1/cgroup
      cat /etc/*release*
      id
  #============================================================================
  - name: Build UCX
    run: |
      echo "INFO: Build UCX"
      cd ${UCX_SRC_DIR}
      git checkout ${UCX_BRANCH}
      ${UCX_SRC_DIR}/autogen.sh
      mkdir -p ${UCX_BUILD_DIR}
      cd ${UCX_BUILD_DIR}
      #${UCX_SRC_DIR}/configure --enable-mt --with-cuda=${CUDA_HOME} --prefix=${UCX_INSTALL_DIR}
      ${UCX_SRC_DIR}/contrib/configure-devel --enable-mt --with-cuda=${CUDA_HOME} --prefix=${UCX_INSTALL_DIR}
      #${UCX_SRC_DIR}/contrib/configure-release-mt --with-cuda=${CUDA_HOME} --prefix=${UCX_INSTALL_DIR}
      make -j install
      cd ${UCX_INSTALL_DIR} && tar cfz ${UCX_SRC_DIR}/ucx-${UCX_BUILD_TYPE}.tgz .
  #============================================================================
  - name: Build XCCL
    run: |
      echo "INFO: Build XCCL"
      cd ${XCCL_SRC_DIR}
      # TODO tmp W/A
      sed -i 's|NVCCFLAGS = .*|NVCCFLAGS = "${UCS_CPPFLAGS} -I${XCCL_TOP_SRCDIR}/src -I${XCCL_TOP_SRCDIR}/src/core" --compiler-options -fno-rtti,-fno-exceptions|g' ${XCCL_SRC_DIR}/src/utils/cuda/kernels/Makefile.am
      ${XCCL_SRC_DIR}/autogen.sh
      mkdir -p ${XCCL_BUILD_DIR}
      cd ${XCCL_BUILD_DIR}
      ${XCCL_SRC_DIR}/configure --with-cuda=${CUDA_HOME}  --with-ucx=${UCX_INSTALL_DIR} \
        --prefix=${XCCL_INSTALL_DIR} --enable-debug
      make -j install
      cd ${XCCL_INSTALL_DIR} && tar cfz ${XCCL_SRC_DIR}/xccl-${XCCL_BUILD_TYPE}.tgz .
  #============================================================================
  - name: Install Torch-UCC
    run: |
      echo "INFO: Install Torch-UCC"
      cd ${WORKSPACE}
      UCX_HOME=${UCX_INSTALL_DIR} \
      XCCL_HOME=${XCCL_INSTALL_DIR} \
      WITH_CUDA=${CUDA_HOME} \
      python setup.py install
      pip3 list | grep torch
      export LD_LIBRARY_PATH=${UCX_INSTALL_DIR}/lib:${XCCL_INSTALL_DIR}/lib:${LD_LIBRARY_PATH}
      python -c 'import torch torch-ucc; print(torch-ucc.__version__)'
  #============================================================================
  - name: Prepare Torch-UCC Package
    run: |
      echo "INFO: Prepare Torch-UCC  Package"
      cd ${WORKSPACE}
      UCX_HOME=${UCX_INSTALL_DIR} \
      XCCL_HOME=${XCCL_INSTALL_DIR} \
      WITH_CUDA=${CUDA_HOME} \
      #python3 setup.py sdist bdist_wheel
      python3 setup.py bdist_wheel
      find dist
      #sleep 10000
  #============================================================================
